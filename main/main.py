"""
Script principal pour le matching des √©tablissements de sant√© avec IA
Version modulaire et optimis√©e
"""

import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'service'))

from hospital_matcher import HospitalMatcher


def get_user_choice():
    """
    Demande √† l'utilisateur s'il souhaite reprendre l'historique ou recommencer
    """
    print("\nüìã OPTIONS DE TRAITEMENT:")
    print("1. Reprendre l'historique existant (recommand√©)")
    print("2. Recommencer √† z√©ro (efface l'historique)")
    print("3. V√©rifier la configuration des fichiers")
    print("4. Changer le niveau de matching fuzzy")
    print("5. Quitter")
    
    while True:
        try:
            choice = input("\nVotre choix (1/2/3/4/5): ").strip()
            
            if choice == "1":
                print("‚úÖ Reprise de l'historique existant...")
                return True
            elif choice == "2":
                confirm = input("‚ö†Ô∏è  √ätes-vous s√ªr de vouloir recommencer √† z√©ro? (oui/non): ").strip().lower()
                if confirm in ['oui', 'o', 'yes', 'y']:
                    print("üîÑ Recommencement √† z√©ro...")
                    return False
                else:
                    print("Annul√©, retour au menu...")
                    continue
            elif choice == "3":
                verify_file_configuration()
                continue
            elif choice == "4":
                choose_fuzzy_level()
                continue
            elif choice == "5":
                print("üëã Au revoir!")
                sys.exit(0)
            else:
                print("‚ùå Choix invalide. Veuillez entrer 1, 2, 3, 4 ou 5.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Au revoir!")
            sys.exit(0)


def choose_fuzzy_level():
    """
    Permet de choisir le niveau de matching fuzzy
    """
    from config import FUZZY_LEVELS, FUZZY_LEVEL
    
    print("\nüéØ === NIVEAU DE MATCHING FUZZY ===")
    print("Choisissez le niveau de strictness pour le matching des noms :")
    print()
    
    # Afficher les options disponibles
    options = list(FUZZY_LEVELS.keys())
    for i, level in enumerate(options, 1):
        info = FUZZY_LEVELS[level]
        current = " (ACTUEL)" if level == FUZZY_LEVEL else ""
        print(f"{i}. {info['description']} - Seuil: {info['threshold']}%{current}")
    
    print()
    print("üí° Plus le seuil est √©lev√©, plus le matching est strict")
    print("   - Seuil √©lev√© = moins de matches, mais plus pr√©cis")
    print("   - Seuil bas = plus de matches, mais plus de faux positifs")
    
    while True:
        try:
            choice = input(f"\nVotre choix (1-{len(options)}): ").strip()
            choice_num = int(choice)
            
            if 1 <= choice_num <= len(options):
                selected_level = options[choice_num - 1]
                selected_info = FUZZY_LEVELS[selected_level]
                
                print(f"‚úÖ Niveau s√©lectionn√©: {selected_info['description']}")
                print(f"   Seuil: {selected_info['threshold']}%")
                
                # Mettre √† jour la configuration
                update_config_file("FUZZY_LEVEL", f'"{selected_level}"')
                print("‚ÑπÔ∏è  Red√©marrez le script pour appliquer les changements")
                break
            else:
                print(f"‚ùå Choix invalide. Entrez un nombre entre 1 et {len(options)}.")
                
        except ValueError:
            print("‚ùå Veuillez entrer un nombre valide.")
        except KeyboardInterrupt:
            print("\n\nüëã Au revoir!")
            sys.exit(0)


def update_config_file(param_name, value):
    """
    Met √† jour un param√®tre dans le fichier config.py
    """
    try:
        import os
        config_path = os.path.join(os.path.dirname(__file__), '..', 'config.py')
        
        # Lire le fichier
        with open(config_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # Chercher et modifier la ligne
        for i, line in enumerate(lines):
            if line.startswith(f"{param_name} ="):
                lines[i] = f"{param_name} = {value}  # Modifi√© automatiquement\n"
                break
        
        # R√©√©crire le fichier
        with open(config_path, 'w', encoding='utf-8') as f:
            f.writelines(lines)
            
        print(f"‚úÖ Param√®tre {param_name} mis √† jour: {value}")
        
    except Exception as e:
        print(f"‚ùå Erreur mise √† jour config: {e}")
        print(f"üìù Modifiez manuellement {param_name} = {value} dans config.py")


def verify_file_configuration():
    """
    V√©rifie et confirme la configuration des fichiers avec l'utilisateur
    """
    import pandas as pd
    from config import PATH_TABLE_A, PATH_TABLE_B, OUTPUT_PATH, COLA_NOM_HOPITAL, COLB_NOM, COLA_FINESS, COLB_FIN_SCS
    
    print("\nüîç === V√âRIFICATION DE LA CONFIGURATION ===")
    print(f"üìÅ Fichier SOURCE (√©tablissements √† traiter): {PATH_TABLE_A}")
    print(f"üìÅ Fichier R√âF√âRENCE (contient les FINESS): {PATH_TABLE_B}")
    print(f"üìÅ Fichier R√âSULTAT: {OUTPUT_PATH}")
    
    # V√©rifier les colonnes r√©elles des fichiers
    try:
        df_source = pd.read_excel(PATH_TABLE_A, nrows=1)
        df_reference = pd.read_excel(PATH_TABLE_B, nrows=1)
        
        print(f"\nÔøΩ COLONNES DISPONIBLES:")
        print(f"   SOURCE: {list(df_source.columns)}")
        print(f"   R√âF√âRENCE: {list(df_reference.columns)}")
        
        print(f"\nüìä CONFIGURATION ACTUELLE:")
        print(f"   SOURCE: Colonne '{COLA_NOM_HOPITAL}' ‚Üí Recherche des FINESS")
        print(f"   R√âF√âRENCE: Colonnes '{COLB_NOM}' et '{COLB_FIN_SCS}' ‚Üí Fournit les FINESS")
        print(f"   R√âSULTAT: Ajoute colonne '{COLA_FINESS}' au fichier source")
        
        # V√©rifier si les colonnes configur√©es existent
        if COLA_NOM_HOPITAL not in df_source.columns:
            print(f"‚ö†Ô∏è  ATTENTION: Colonne '{COLA_NOM_HOPITAL}' introuvable dans le fichier source!")
            print(f"   Colonnes disponibles: {list(df_source.columns)}")
        
        if COLB_NOM not in df_reference.columns:
            print(f"‚ö†Ô∏è  ATTENTION: Colonne '{COLB_NOM}' introuvable dans le fichier r√©f√©rence!")
            
    except Exception as e:
        print(f"‚ùå Erreur lecture fichiers: {e}")
    
    print(f"\nüí° LOGIQUE:")
    print(f"   Pour chaque √©tablissement du fichier SOURCE,")
    print(f"   on cherche dans le fichier R√âF√âRENCE l'√©tablissement correspondant")
    print(f"   et on r√©cup√®re son num√©ro FINESS.")
    
    while True:
        confirm = input("\n‚ùì Cette configuration est-elle correcte? (oui/non/inverser/corriger): ").strip().lower()
        
        if confirm in ['oui', 'o', 'yes', 'y']:
            print("‚úÖ Configuration confirm√©e")
            break
        elif confirm in ['corriger', 'c', 'fix']:
            print("\nüîß CORRECTION DE LA CONFIGURATION:")
            print("Pour corriger, modifiez le fichier config.py")
            print("Section STATIC_CONFIG:")
            print("- COLA_NOM_HOPITAL: nom de la colonne dans le fichier source")
            print("- COLB_NOM: nom de la colonne dans le fichier r√©f√©rence")
            input("Appuyez sur Entr√©e apr√®s correction...")
            break
            break
        elif confirm in ['non', 'n', 'no']:
            print("‚ùå Veuillez modifier le fichier config.py selon vos besoins")
            sys.exit(0)
        elif confirm in ['inverser', 'inv', 'i']:
            suggest_file_inversion()
            break
        else:
            print("R√©pondez par 'oui', 'non' ou 'inverser'")


def suggest_file_inversion():
    """
    Propose d'inverser les fichiers si l'utilisateur le souhaite
    """
    print("\nüîÑ INVERSION DES FICHIERS:")
    print("Pour inverser les r√¥les des fichiers, modifiez dans config.py:")
    print("PATH_TABLE_A = votre fichier de r√©f√©rence (qui contient les FINESS)")
    print("PATH_TABLE_B = votre fichier √† traiter (o√π ajouter les FINESS)")
    print("\nEt ajustez les noms de colonnes en cons√©quence.")
    
    input("\nAppuyez sur Entr√©e pour continuer...")
    sys.exit(0)


def choose_establishment_type_handling():
    """
    Demande √† l'utilisateur comment il veut g√©rer les types d'√©tablissements
    """
    print("\nüè• === GESTION DES TYPES D'√âTABLISSEMENTS ===")
    print("Comment voulez-vous traiter les types d'√©tablissements dans le matching ?")
    print()
    print("1. Ignorer les types (traiter tous les √©tablissements de la m√™me fa√ßon)")
    print("2. Diff√©rencier h√¥pitaux et cliniques (matching plus pr√©cis)")
    print("3. Forcer un type sp√©cifique (tous consid√©r√©s comme h√¥pitaux)")
    print("4. Forcer un type sp√©cifique (tous consid√©r√©s comme cliniques)")
    
    while True:
        try:
            choice = input("\nVotre choix (1/2/3/4): ").strip()
            
            if choice == "1":
                print("‚úÖ Types d'√©tablissements ignor√©s - matching universel")
                return False, None
            elif choice == "2":
                print("‚úÖ Diff√©renciation h√¥pitaux/cliniques activ√©e")
                return True, None
            elif choice == "3":
                print("‚úÖ Tous les √©tablissements trait√©s comme des h√¥pitaux")
                return True, "hopital"
            elif choice == "4":
                print("‚úÖ Tous les √©tablissements trait√©s comme des cliniques")
                return True, "clinique"
            else:
                print("‚ùå Choix invalide. Veuillez entrer 1, 2, 3 ou 4.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Au revoir!")
            sys.exit(0)


def main():
    """
    Fonction principale du programme
    """
    print("üè• === MATCHING D'√âTABLISSEMENTS DE SANT√â AVEC IA ===")
    print("Version modulaire - Optimis√©e pour Gemini 2.5 Flash")
    print("=" * 60)
    
    # Afficher la configuration actuelle
    from config import FUZZY_LEVEL, FUZZY_LEVELS, FUZZY_THRESHOLD
    fuzzy_info = FUZZY_LEVELS[FUZZY_LEVEL]
    print(f"üéØ Niveau de matching fuzzy: {fuzzy_info['description']} (Seuil: {FUZZY_THRESHOLD}%)")
    
    # Demander √† l'utilisateur s'il souhaite reprendre l'historique
    use_history = get_user_choice()
    
    # Choix de la gestion des types d'√©tablissements
    differentiate_types, forced_type = choose_establishment_type_handling()
    
    try:
        # Cr√©er le matcher avec le choix de l'utilisateur
        # use_history = True signifie reprendre l'historique
        # use_history = False signifie recommencer √† z√©ro (reset_history = True)
        matcher = HospitalMatcher(reset_history=not use_history, differentiate_types=differentiate_types, forced_type=forced_type)
        
        # Charger les donn√©es
        matcher.load_data()
        
        # Traiter tous les h√¥pitaux
        matcher.process_all_hospitals()
        
        # Sauvegarder les r√©sultats
        matcher.save_results()
        
        print("\nüéâ Traitement termin√© avec succ√®s!")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Traitement interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
