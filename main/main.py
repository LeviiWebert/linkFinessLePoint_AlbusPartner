"""
Script principal pour le matching des √©tablissements de sant√© avec IA
Version modulaire et optimis√©e
"""

import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'service'))

from hospital_matcher import HospitalMatcher


def get_user_choice():
    """
    Demande √† l'utilisateur s'il souhaite reprendre l'historique ou recommencer
    """
    print("\nüìã OPTIONS DE TRAITEMENT:")
    print("1. Reprendre l'historique existant (recommand√©)")
    print("2. Recommencer √† z√©ro (efface l'historique)")
    print("3. V√©rifier la configuration des fichiers")
    print("4. Changer le niveau de matching fuzzy")
    print("5. Mode TEST - √âchantillon de 25 √©tablissements avec logging d√©taill√©")
    print("6. Quitter")
    
    while True:
        try:
            choice = input("\nVotre choix (1/2/3/4/5/6): ").strip()
            
            if choice == "1":
                print("‚úÖ Reprise de l'historique existant...")
                return True, False
            elif choice == "2":
                confirm = input("‚ö†Ô∏è  √ätes-vous s√ªr de vouloir recommencer √† z√©ro? (oui/non): ").strip().lower()
                if confirm in ['oui', 'o', 'yes', 'y']:
                    print("üîÑ Recommencement √† z√©ro...")
                    return False, False
                else:
                    print("Annul√©, retour au menu...")
                    continue
            elif choice == "3":
                verify_file_configuration()
                continue
            elif choice == "4":
                choose_fuzzy_level()
                continue
            elif choice == "5":
                print("üß™ Mode TEST activ√© - √âchantillon al√©atoire avec logging d√©taill√©")
                return False, True  # reset=True, test_mode=True
            elif choice == "6":
                print("üëã Au revoir!")
                sys.exit(0)
            else:
                print("‚ùå Choix invalide. Veuillez entrer 1, 2, 3, 4, 5 ou 6.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Au revoir!")
            sys.exit(0)


def choose_fuzzy_level():
    """
    Permet de choisir le niveau de matching fuzzy
    """
    from config import FUZZY_LEVELS, FUZZY_LEVEL
    
    print("\nüéØ === NIVEAU DE MATCHING FUZZY ===")
    print("Choisissez le niveau de strictness pour le matching des noms :")
    print()
    
    # Afficher les options disponibles
    options = list(FUZZY_LEVELS.keys())
    for i, level in enumerate(options, 1):
        info = FUZZY_LEVELS[level]
        current = " (ACTUEL)" if level == FUZZY_LEVEL else ""
        print(f"{i}. {info['description']} - Seuil: {info['threshold']}%{current}")
    
    print()
    print("üí° Plus le seuil est √©lev√©, plus le matching est strict")
    print("   - Seuil √©lev√© = moins de matches, mais plus pr√©cis")
    print("   - Seuil bas = plus de matches, mais plus de faux positifs")
    
    while True:
        try:
            choice = input(f"\nVotre choix (1-{len(options)}): ").strip()
            choice_num = int(choice)
            
            if 1 <= choice_num <= len(options):
                selected_level = options[choice_num - 1]
                selected_info = FUZZY_LEVELS[selected_level]
                
                print(f"‚úÖ Niveau s√©lectionn√©: {selected_info['description']}")
                print(f"   Seuil: {selected_info['threshold']}%")
                
                # Mettre √† jour la configuration
                update_config_file("FUZZY_LEVEL", f'"{selected_level}"')
                print("‚ÑπÔ∏è  Red√©marrez le script pour appliquer les changements")
                break
            else:
                print(f"‚ùå Choix invalide. Entrez un nombre entre 1 et {len(options)}.")
                
        except ValueError:
            print("‚ùå Veuillez entrer un nombre valide.")
        except KeyboardInterrupt:
            print("\n\nüëã Au revoir!")
            sys.exit(0)


def update_config_file(param_name, value):
    """
    Met √† jour un param√®tre dans le fichier config.py
    """
    try:
        import os
        config_path = os.path.join(os.path.dirname(__file__), '..', 'config.py')
        
        # Lire le fichier
        with open(config_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # Chercher et modifier la ligne
        for i, line in enumerate(lines):
            if line.startswith(f"{param_name} ="):
                lines[i] = f"{param_name} = {value}  # Modifi√© automatiquement\n"
                break
        
        # R√©√©crire le fichier
        with open(config_path, 'w', encoding='utf-8') as f:
            f.writelines(lines)
            
        print(f"‚úÖ Param√®tre {param_name} mis √† jour: {value}")
        
    except Exception as e:
        print(f"‚ùå Erreur mise √† jour config: {e}")
        print(f"üìù Modifiez manuellement {param_name} = {value} dans config.py")


def verify_file_configuration():
    """
    V√©rifie et confirme la configuration des fichiers avec l'utilisateur
    """
    import pandas as pd
    from config import (PATH_TABLE_A, PATH_TABLE_B, OUTPUT_PATH, 
                       get_column_mapping, get_geo_comparison_strategy, 
                       get_finess_strategy, validate_configuration)
    
    print("\nüîç === V√âRIFICATION DE LA CONFIGURATION ===")
    print(f"üìÅ Fichier SOURCE (√©tablissements √† traiter): {PATH_TABLE_A}")
    print(f"üìÅ Fichier R√âF√âRENCE (contient les FINESS): {PATH_TABLE_B}")
    print(f"üìÅ Fichier R√âSULTAT: {OUTPUT_PATH}")
    
    # Validation de la configuration
    validation = validate_configuration()
    if not validation["valid"]:
        print("\n‚ùå ERREURS DE CONFIGURATION:")
        for error in validation["errors"]:
            print(f"   ‚Ä¢ {error}")
        input("Appuyez sur Entr√©e pour continuer...")
        return
    
    if validation["warnings"]:
        print("\n‚ö†Ô∏è  AVERTISSEMENTS:")
        for warning in validation["warnings"]:
            print(f"   ‚Ä¢ {warning}")
    
    # Afficher la configuration actuelle
    columns = get_column_mapping()
    geo_strategy = get_geo_comparison_strategy()
    finess_strategy = get_finess_strategy()
    
    print(f"\nüìä CONFIGURATION ACTUELLE:")
    print(f"   SOURCE: '{columns['source']['name']}' (noms) + '{columns['source']['city']}' (villes)")
    if columns['source']['department']:
        print(f"           + '{columns['source']['department']}' (d√©partements)")
    
    print(f"   R√âF√âRENCE: '{columns['reference']['name_primary']}' (noms)")
    if columns['reference']['name_secondary']:
        print(f"              + '{columns['reference']['name_secondary']}' (noms alternatifs)")
    print(f"              + '{columns['reference']['city']}' (villes)")
    if columns['reference']['department']:
        print(f"              + '{columns['reference']['department']}' (d√©partements)")
    
    print(f"\nüó∫Ô∏è  STRAT√âGIE G√âOGRAPHIQUE:")
    if geo_strategy["city_only"]:
        print("   ‚Ä¢ Comparaison par VILLE uniquement")
    elif geo_strategy["department_only"]:
        print("   ‚Ä¢ Comparaison par D√âPARTEMENT uniquement")
    elif geo_strategy["both"]:
        print("   ‚Ä¢ Comparaison par VILLE ET D√âPARTEMENT")
    
    print(f"\nüè• STRAT√âGIE FINESS:")
    if finess_strategy["prefer_source"]:
        print("   ‚Ä¢ Source principale: TABLE SOURCE")
    else:
        print("   ‚Ä¢ Source principale: TABLE R√âF√âRENCE")
    
    if finess_strategy["has_source_finess"]:
        print(f"   ‚Ä¢ FINESS source: '{columns['source']['finess']}'")
    if finess_strategy["has_reference_finess"]:
        print(f"   ‚Ä¢ FINESS r√©f√©rence: '{columns['reference']['finess']}'")
    
    # V√©rifier les colonnes r√©elles des fichiers
    try:
        df_source = pd.read_excel(PATH_TABLE_A, nrows=1)
        df_reference = pd.read_excel(PATH_TABLE_B, nrows=1)
        
        print(f"\nüîç V√âRIFICATION DES COLONNES:")
        
        # V√©rifier colonnes source
        missing_source = []
        for key, col in columns['source'].items():
            if col and col not in df_source.columns:
                missing_source.append(f"{key}: '{col}'")
        
        # V√©rifier colonnes r√©f√©rence
        missing_ref = []
        for key, col in columns['reference'].items():
            if col and col not in df_reference.columns:
                missing_ref.append(f"{key}: '{col}'")
        
        if missing_source:
            print("   ‚ùå Colonnes manquantes dans SOURCE:")
            for missing in missing_source:
                print(f"      ‚Ä¢ {missing}")
        
        if missing_ref:
            print("   ‚ùå Colonnes manquantes dans R√âF√âRENCE:")
            for missing in missing_ref:
                print(f"      ‚Ä¢ {missing}")
        
        if not missing_source and not missing_ref:
            print("   ‚úÖ Toutes les colonnes configur√©es sont pr√©sentes")
            
    except Exception as e:
        print(f"‚ùå Erreur lecture fichiers: {e}")
    
    print(f"\nüí° LOGIQUE:")
    print(f"   Pour chaque √©tablissement du fichier SOURCE,")
    print(f"   on cherche dans le fichier R√âF√âRENCE l'√©tablissement correspondant")
    if finess_strategy["has_reference_finess"]:
        print(f"   et on r√©cup√®re son num√©ro FINESS.")
    else:
        print(f"   et on utilise le FINESS existant.")
    
    while True:
        confirm = input("\n‚ùì Cette configuration est-elle correcte? (oui/non/d√©tails): ").strip().lower()
        
        if confirm in ['oui', 'o', 'yes', 'y']:
            print("‚úÖ Configuration confirm√©e")
            break
        elif confirm in ['d√©tails', 'd', 'details']:
            show_detailed_config()
            continue
        elif confirm in ['non', 'n', 'no']:
            print("‚ùå Veuillez relancer avec COLUMN_CONFIG_MODE = 'interactive' dans config.py")
            sys.exit(0)
        else:
            print("R√©pondez par 'oui', 'non' ou 'd√©tails'")

def show_detailed_config():
    """
    Affiche la configuration d√©taill√©e
    """
    from config import (GEO_COMPARISON_TYPE, PRIMARY_FINESS_SOURCE, 
                       FUZZY_LEVEL, FUZZY_THRESHOLD, COLUMN_CONFIG_MODE)
    
    print("\nüìã === CONFIGURATION D√âTAILL√âE ===")
    print(f"Mode configuration: {COLUMN_CONFIG_MODE}")
    print(f"Type comparaison g√©o: {GEO_COMPARISON_TYPE}")
    print(f"Source FINESS primaire: {PRIMARY_FINESS_SOURCE}")
    print(f"Niveau fuzzy: {FUZZY_LEVEL} (seuil: {FUZZY_THRESHOLD}%)")
    print("="*40)

def choose_establishment_type_handling():
    """
    Demande √† l'utilisateur comment il veut g√©rer les types d'√©tablissements
    """
    print("\nüè• === GESTION DES TYPES D'√âTABLISSEMENTS ===")
    print("Comment voulez-vous traiter les types d'√©tablissements dans le matching ?")
    print()
    print("1. Ignorer les types (traiter tous les √©tablissements de la m√™me fa√ßon)")
    print("2. Diff√©rencier h√¥pitaux et cliniques (matching plus pr√©cis)")
    print("3. Forcer un type sp√©cifique (tous consid√©r√©s comme h√¥pitaux)")
    print("4. Forcer un type sp√©cifique (tous consid√©r√©s comme cliniques)")
    
    while True:
        try:
            choice = input("\nVotre choix (1/2/3/4): ").strip()
            
            if choice == "1":
                print("‚úÖ Types d'√©tablissements ignor√©s - matching universel")
                return False, None
            elif choice == "2":
                print("‚úÖ Diff√©renciation h√¥pitaux/cliniques activ√©e")
                return True, None
            elif choice == "3":
                print("‚úÖ Tous les √©tablissements trait√©s comme des h√¥pitaux")
                return True, "hopital"
            elif choice == "4":
                print("‚úÖ Tous les √©tablissements trait√©s comme des cliniques")
                return True, "clinique"
            else:
                print("‚ùå Choix invalide. Veuillez entrer 1, 2, 3 ou 4.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Au revoir!")
            sys.exit(0)


def main():
    """
    Fonction principale du programme
    """
    print("üè• === MATCHING D'√âTABLISSEMENTS DE SANT√â AVEC IA ===")
    print("Version modulaire - Optimis√©e pour Gemini 2.5 Flash")
    print("=" * 60)
    
    # Afficher la configuration actuelle
    from config import FUZZY_LEVEL, FUZZY_LEVELS, FUZZY_THRESHOLD, TEST_SAMPLE_SIZE
    fuzzy_info = FUZZY_LEVELS[FUZZY_LEVEL]
    print(f"üéØ Niveau de matching fuzzy: {fuzzy_info['description']} (Seuil: {FUZZY_THRESHOLD}%)")
    
    # Demander √† l'utilisateur s'il souhaite reprendre l'historique
    use_history, test_mode = get_user_choice()
    
    # Choix de la gestion des types d'√©tablissements
    differentiate_types, forced_type = choose_establishment_type_handling()
    
    try:
        # Cr√©er le matcher avec le choix de l'utilisateur
        matcher = HospitalMatcher(reset_history=not use_history, differentiate_types=differentiate_types, forced_type=forced_type)
        
        # Activer le mode test si demand√©
        if test_mode:
            from test_mode import create_test_hospital_matcher
            matcher = create_test_hospital_matcher(matcher, enable_test_mode=True, sample_size=TEST_SAMPLE_SIZE)
            print(f"üß™ Mode test activ√© - {TEST_SAMPLE_SIZE} √©tablissements seront test√©s")
        
        # Charger les donn√©es
        matcher.load_data()
        
        # Traiter tous les h√¥pitaux
        matcher.process_all_hospitals()
        
        # Sauvegarder les r√©sultats
        matcher.save_results()
        
        print("\nüéâ Traitement termin√© avec succ√®s!")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Traitement interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
